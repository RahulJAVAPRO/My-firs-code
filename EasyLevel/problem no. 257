/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> string = new LinkedList<>();
        binaryPath(root, "", string);
        return string;

    }
    private void binaryPath(TreeNode node, String path, List<String> string){
        if(node == null) return;
        path +=node.val;
        if(node.left == null && node.right == null){
            string.add(path);
        }else{
            path += "->";
            binaryPath(node.left, path, string);
            binaryPath (node.right, path, string);
        }
    }
}
